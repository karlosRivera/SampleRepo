      
------------------------------------------------------------------------------------------------------------------------      
--Purpose : Create a recordset to display the broker-wise Line item wise periodical data in a tabular format following CSS pattern of display      
--          Columns are Section, Line item, Broker Name, Broker Code,Model Date and all relevant periods in column (which will be created dynamically)      
---         For every LI , after displaying the broker data a consensus (Average) figures of the data will be displayed      
---         Thereafter few statistical information to be displayed for each Line Item (called Blue metrics per RDSS terminology)      
---      
--- Source : tblOutputTable and tblOutPeriod      
---      
--- Steps : 1) Created few temporary tables to gather the data in a sequence (here the order of display to be followed)      
---         2) Accumulate broker list as per Client entitlement as it is available in the database / as set in preference page      
---         3) Accumulate the periods used in the Output of the Ticker chosenand get the 10 Years before and 10 Years After the current Earnings range .........(Per Team Decision)      
---         4) Collect entitled broker-wise detailed data from tblOutputTable in a temporary table      
---         5) Calculate the average periodical figures for each Line Item and collect it in another temporary table      
---         6) Calculate the statistical periodical figures for each Line Item and collect it in another temporary table      
---         7) Join all these there temporary tables and display the the accumulated information in an order of sequence of Line items followed by CSS pattern      
---      
------------------------------------------------------------------------------------------------------------------------      

ALTER Procedure [dbo].[USP_Generate_CSM_New_Test]      
(      
 @Ticker NVARCHAR(10),      
 @ClientCode NVARCHAR(MAX),      
 @withAllBrokers char(1)      
)      
AS       
Begin      
      
BEGIN TRY      
--declare @Ticker NVARCHAR(10)      
--declare @ClientCode NVARCHAR(20)      
--declare @withAllBrokers char(1)      
      
--set @Ticker='CSGP'      
--set @ClientCode='IVZ'      
--SET @withAllBrokers=''      
 DECLARE @TickerID varchar(10),@CSM_Id int, @RecFound int,@RecCount int, @ctr int      
 IF OBJECT_ID('TempDB..#TmpAll_Broker_LI') IS NOT NULL      
  begin      
   drop table #TmpAll_Broker_LI --- For All Brokers Li-wise periodical data collection      
  end       
 IF OBJECT_ID('TempDB..#TmpZacksCons') IS NOT NULL      
  begin      
   drop table #TmpZacksCons      
  end         
 IF OBJECT_ID('TempDB..#TmpBM') IS NOT NULL      
  begin      
   drop table #TmpBM --- For Blue Metrics Li-wise periodical data collection      
  end          
 IF OBJECT_ID('TempDB..#tmpPeriodAll') IS NOT NULL      
  begin      
   drop table #tmpPeriodAll -- For all period collection used in for the Ticker in output      
  end      
 IF OBJECT_ID('TempDB..#tmpPeriod') IS NOT NULL      
  begin      
   drop table #tmpPeriod -- For all period collection from #tmpPeriodAll to make in sequence      
  end      
 IF OBJECT_ID('TempDB..#Brokers') IS NOT NULL      
  begin      
   drop table #Brokers      
  end      
 --** Broker List / Per Client Entitlements      
       
 SELECT @TickerID=MasterId From tblTickerMasterId WHERE Ticker=@Ticker      
 SELECT @CSM_Id=CSM_ID FROM tblCSM_Tuner_Client WHERE ClientCode=@ClientCode AND TickerId=@TickerID      
      
 Set @RecFound=0      
 ---- Creating #tmp Tables................      
 Create Table #tmpPeriod (Period varchar(10),PeriodOrder varchar(10))      
 Create Table #Brokers ( Brokers NVARCHAR(50) NOT NULL, BrokerName NVARCHAR(100) NOT NULL )      
  Insert Into #Brokers      
    Select A.BrokerCode, B.BrokerName      
     --From tblClientBroker A      
     From tblClientBroker_Earnings A      
     Join tblBroker B ON SUBSTRING(A.BrokerCode,1,len(A.BrokerCode)-charindex('-',A.BrokerCode))=B.Brokercode --      
     Join tblbrokerTicker C On SUBSTRING(A.BrokerCode,1,len(A.BrokerCode)-charindex('-',A.BrokerCode))=C.Brokercode And A.Ticker=C.Ticker      
    --Where B.Active='A'-- And ((B.Contributing='Y' And A.Approved='Y') Or B.Contributing='N')      
     --And A.ClientCode=@ClientCode And C.Ticker=@Ticker  And C.Category!='NC'      
     Where A.ClientCode=@ClientCode And A.Ticker=@Ticker      
 --** End Brokers      
 Set @RecFound=0      
 -- Collecting the periods from tblOutputPeriod table in a sequencial order of 1Q<Year>,2Q<Year>,3Q<Year>,4Q<Year>,FY<Year>      
      
 Select Distinct A.Period , --REPLACE(REPLACE(Period, 'A', ''), 'E', '')  as Period,      
    case when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%1Q%' then  ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'1Q','')))+cast( 0 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%2Q%'  then ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'2Q','')))+cast( 1 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%1H%'  then ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'1H','')))+cast( 2 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%3Q%' then  ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'3Q','')))+cast( 3 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%4Q%' then  ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'4Q','')))+cast( 4 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%2H%'  then ltrim(rtrim(REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'2H','')))+cast( 5 as varchar)      
       when REPLACE(REPLACE(A.Period, 'A', ''), 'E', '') like '%FY%' then  ltrim(rtrim((REPLACE(REPLACE(REPLACE(A.Period, 'A', ''), 'E', ''),'FY',''))))+cast( 6 as varchar)      
     end as PeriodOrder Into #tmpPeriodAll      
    From tblOutputDetl_Period A      
    Where A.Ticker=@Ticker  And (A.Period like '%Q%' or A.Period like '%H%' or A.Period like '%FY%')      
    Order By PeriodOrder      
      
--Declare @LastActual char(5)      
--Select @LastActual=Max(periodOrder) From #tmpPeriodAll Where Period like '%A'      
      
Insert Into #tmpPeriod       
 Select Period,PeriodOrder from #tmpPeriodAll Order by PeriodOrder      
DECLARE @PeriodFormat VARCHAR(10)      
SET @PeriodFormat=''      
SELECT @PeriodFormat='Q' FROM #tmpPeriod WHERE [PERIOD] LIKE '%Q%'      
SELECT @PeriodFormat=@PeriodFormat+'H' FROM #tmpPeriod WHERE [PERIOD] LIKE '%H%'      
      
DECLARE @columns NVARCHAR(MAX), @sql VARCHAR(MAX)      
DECLARE @Period NVARCHAR(MAX), @PeriodOrder NVARCHAR(MAX),@PeriodCols NVARCHAR(MAX),@PeriodAlias NVARCHAR(MAX),@PrevField VARCHAR(10),@CurrentField VARCHAR(10),@PrevYearField VARCHAR(10)      
DECLARE @HighValue VARCHAR(MAX),@LowValue VARCHAR(MAX),@NumberOfBroker VARCHAR(MAX),@QoQGrowth VARCHAR(MAX),@YoYGrowth VARCHAR(MAX),@BM1stElement VARCHAR(MAX)      
DECLARE @AvgSql nvarchar(Max), @MarginSql varchar(MAX), @VarianceSql nvarchar(MAX), @VariancePercentSql nvarchar(MAX)      
DECLARE @AddColumn VARCHAR(MAX),@AddColumnBM VARCHAR(MAX),@AddColumnComment VARCHAR(MAX)--,@AddColumnCons VARCHAR(MAX)      
         
DECLARE @UpDtActDate VARCHAR(MAX),@UpDtEstSql VARCHAR(MAX), @UpDtQoQ VARCHAR(MAX), @UpDtYoY VARCHAR(Max), @UpDtBM1stElement VARCHAR(MAX)      
DECLARE @UpdateSql VARCHAR(MAX),@UpdateSqlComment VARCHAR(MAX), @UpdateAvgComment VARCHAR(MAX)      
DECLARE @Fields VARCHAR(MAX)      
DECLARE @QtrStart int,@QtrCtr int, @FYCtr int,@HCtr INT,@Prev_Yr VARCHAR(4),@Current_Yr VARCHAR(4)      
--      
DECLARE @PeriodColsComment NVARCHAR(MAX),@PeriodAliasComment NVARCHAR(MAX)      
SET @QtrStart=0      
SET @QtrCtr=0      
SET @FYCtr=0      
SET @HCtr=0      
Set @RecCount=0      
--      
Set @RecCount=0      
Select @RecCount=Count(*) From #tmpPeriod      
If @RecCount>0      
Begin      
 SET @UpdateAvgComment=''      
 SET @VarianceSql=''      
 SET @VariancePercentSql=''      
 SET @MarginSql=''      
 SET @UpDtEstSql=''      
 SET @UpDtActDate=''      
 SET @UpdateSql=''      
 SET @UpdateSqlComment=''      
 SET @Period=''      
 SET @PeriodOrder=''      
 Set @PeriodCols=''      
 Set @PeriodAlias=''      
 SET @AddColumn=''      
 Set @AddColumnBM=''      
 Set @AddColumnComment=''      
 --Set @AddColumnCons=''      
 Set @QoQGrowth=''      
 Set @YoYGrowth=''      
 Set @BM1stElement=''      
 SET @columns = N''      
       
 SET @PeriodColsComment=''      
 SET @PeriodAliasComment=''      
      
 SELECT @columns+=N', p.'+QUOTENAME([Name])      
 FROM      
 (      
 Select PeriodOrder, Period [Name]      
    from #tmpPeriod      
    group by PeriodOrder, Period      
 ) AS x ;      
      
 --** Detail data per Broker      
 Create Table #TmpAll_Broker_LI (Section nvarchar(50),LineItem nvarchar(500),      
         BrokerCode nvarchar(10),BrokerName nvarchar(200),[Revise Date] NVARCHAR(20),Ord int)      
    --*New* Consensus Data      
 Create Table #TmpZacksCons (Section nvarchar(50),LineItem nvarchar(500),Ord int)      
 --** Detail data per Blue Metrics      
 Create Table #TmpBM (Section nvarchar(50),LineItem nvarchar(500),      
        bm_element nvarchar(max), code nvarchar(2),Ord int)      
--,      
 --** For Zacks Consensus      
 Set @sql=''      
 SET @AvgSql=''      
 SET @HighValue=''      
 SET @LowValue=''      
 SET @NumberOfBroker=''      
 SET @Fields=''      
 SET @PrevField=''      
 SET @CurrentField=''      
 SET @PrevYearField=''      
 SET @UpDtQoQ=''      
 SET @UpdtYoy=''      
 SET @UpDtBM1stElement=''      
 SET @ctr=0      
 SET @Prev_Yr=''      
 SET @Current_Yr=''      
       
 Declare crPeriod cursor For      
  Select Period, PeriodOrder      
    from #tmpPeriod      
    group by PeriodOrder, Period       
 Open crPeriod      
 Fetch Next From crPeriod Into @Period,@PeriodOrder      
 While(@@FETCH_STATUS=0)      
  Begin      
   Set @ctr=@ctr+1      
   Set @CurrentField=@Period --'F'+RTRIM(LTRIM(Convert(varchar(10),@ctr)))      
         
   --Set @AvgSql = @AvgSql+ 'Avg(CONVERT(decimal(20,6),['+'F'+RTRIM(LTRIM(Convert(varchar(10),@ctr)))+'])) ['+@Period+'],'      
   Set @AvgSql = @AvgSql+ 'Avg(CONVERT(decimal(20,6),['+@Period+'])) ['+@Period+'],'      
      
   SET @UpdateAvgComment = @UpdateAvgComment+'['+@Period+'_Comment]=Output.['+@Period+'_Comment],'      
      
   Set @PeriodAlias = @PeriodAlias+'F'+TRIM(Convert(char(3),@ctr))+' ['+@Period+'],'      
   Set @PeriodAliasComment = @PeriodAliasComment+'F'+TRIM(Convert(char(3),@ctr))+'CommentExist ['+@Period+'_Comment],'      
   Set @PeriodCols = @PeriodCols+' ['+@Period+'],'      
   Set @PeriodColsComment = @PeriodColsComment+' ['+@Period+'_Comment],'      
      
      
   Set @Fields = @Fields+'F'+TRIM(Convert(varchar(10),@ctr))+','      
      
   If @Period Like '%E' --- Because These Following calculation applicable for Estimated periods      
   Begin      
    Set @HighValue = @HighValue+ 'Max(CONVERT(decimal(20,6),['+@CurrentField+'])) ['+@Period+'],'      
    Set @LowValue = @LowValue+ 'Min(CONVERT(decimal(20,6),['+@CurrentField+'])) ['+@Period+'],'      
    Set @NumberOfBroker = @NumberOfBroker+ 'Count(CONVERT(decimal(20,6),['+@CurrentField+'])) ['+@Period+'],'      
   ------------** For Updating Brokerwise data (#TmpZacks & #TmpAllBM) with pivoted OutputDetail      
    Set @UpDtEstSql=@UpDtEstSql+'['+@Period+']=Output.['+@Period+'],'      
   End      
   Else If @Period Like '%A' --- Because These Following calculation applicable for Actual periods      
   Begin      
    -----------** For Updating Brokerwise data (#TmpZacks & #TmpAllBM) with pivoted OutputDetail      
    Set @UpDtActDate = @UpDtActDate+'['+@Period+']=Output.['+@Period+'],'      
    SET @VarianceSql = @VarianceSql+'['+@Period+']=(CONVERT(decimal(20,6),B.['+@Period+']) - CONVERT(decimal(20,6),C.['+@Period+'])),'      
          
    SET @VariancePercentSql = @VariancePercentSql+'['+@Period+']=(CASE WHEN ISNULL(CONVERT(decimal(20,6),C.['+@Period+']),0)=0 THEN NULL ELSE CONVERT(decimal(20,6),B.['+@Period+'])/CONVERT(decimal(20,6),C.['+@Period+']) END) ,'      
   End      
   --SET @UpdateCommentSql=@UpdateCommentSql+'['+@Period+']=Output.['+@Period+']+''~'','      
--  2010FY 2011FY 2012FY 2013FY 1Q2014 2Q2014 3Q2014 4Q2014 2014FY 1Q2015 2Q2015 3Q2015 4Q2015 2015FY       
--  2010FY 2011FY 2012FY 2013FY 1Q2014 2Q2014 1H2014 3Q2014 4Q2014 2H2014 2014FY 1Q2015 2Q2015 1H2015 3Q2015 4Q2015 2H2015 2015FY       
--CTR 1  2  3  4  5 6  7  8  9 10  11  12  13 14  15  16  17 18      
--QCTR         1 2    3  4     5  6   7  8      
--FYCTR 1  2  3  4            5            6      
--HCTR            1        2       3                  4      
   If @ctr>1       
   Begin      
    If  @Period Like '%Q%'      
    Begin      
     SET @QtrCtr = @QtrCtr+1      
     SET @Prev_Yr = SUBSTRING( CONVERT(VARCHAR(6),@PeriodOrder),1,4)-1        
     SET @Current_Yr=SUBSTRING( CONVERT(VARCHAR(6),@PeriodOrder),1,4)      
     If @QtrCtr>1      
     Begin      
      If @Period Like '1Q%'      
       SELECT @PrevField=Period FROM #tmpPeriod WHERE Period LIKE '4Q '+@Prev_Yr+'%'       
       --Set @PrevField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 3 ELSE 2 END)))      
      Else --If @Period Like '2Q%' OR @Period LIKE '4Q%'      
       --Set @PrevField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-1)))      
       SELECT @PrevField=Period FROM #tmpPeriod WHERE Period LIKE CONVERT(CHAR(1),LEFT(@Period,1)-1)+'Q '+@Current_Yr+'%'       
             
      --ELSE If @Period Like '3Q%'      
      -- Set @PrevField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 2 ELSE 1 END)))      
            
      Set @QoQGrowth=@QoQGrowth+'(CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevField+']),0)=0 THEN Null      
             ELSE (CASE WHEN CONVERT(decimal(20,6),['+@PrevField+'])<0 THEN -((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevField+']))-1)       
                ELSE ((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevField+']))-1) END)      
             END) ['+@Period+'],'      
      Set @UpDtQoQ=@UpDtQoQ+'['+@Period+']=Output.['+@Period+'],'          
      If @QtrCtr>=5      
      Begin      
       SELECT @PrevYearField=PERIOD FROM #tmpPeriod WHERE Period LIKE LEFT(@Period,3)+@Prev_Yr+'%'      
       --'F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 7 ELSE 5 END)))      
       --Set @YoYGrowth=@YoYGrowth+'(CASE WHEN ISNULL(Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])),0)=0 THEN Null      
       --       ELSE (CASE WHEN ISNULL(Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])),0)<0 THEN -((Avg(CONVERT(decimal(20,6),['+@CurrentField+']))/Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])))-1)      
       --           ELSE ((Avg(['+@CurrentField+'])/Avg(['+@PrevYearField+']))-1) END)      
       --       END ) ['+@Period+'],'      
       Set @YoYGrowth=@YoYGrowth+'(CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)=0 THEN Null      
              ELSE (CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)<0 THEN -((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1)      
                  ELSE ((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1) END)      
              END ) ['+@Period+'],'      
      
       Set @UpDtYoY=@UpDtYoY+'['+@Period+']=Output.['+@Period+'],'      
      End      
     End      
           
    End      
    ELSE If  @Period Like '%H%'      
    Begin      
     SET @HCtr = @HCtr+1      
     If @HCtr>1      
     Begin      
      If @Period Like '1H%'      
       SELECT @PrevField=Period FROM #tmpPeriod WHERE Period LIKE '2H '+@Prev_Yr+'%'       
       --Set @PrevField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 4 ELSE 2 END)))      
      ELSE If @Period Like '2H%'      
       SELECT @PrevField=Period FROM #tmpPeriod WHERE Period LIKE '1H '+@Current_Yr+'%'       
       --Set @PrevField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 3 ELSE 1 END)))      
            
      Set @QoQGrowth=@QoQGrowth+'(CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevField+']),0)=0 THEN Null      
             ELSE (CASE WHEN CONVERT(decimal(20,6),['+@PrevField+'])<0 THEN -((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevField+']))-1)       
                ELSE ((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevField+']))-1) END)      
             END) ['+@Period+'],'      
      Set @UpDtQoQ=@UpDtQoQ+'['+@Period+']=Output.['+@Period+'],'      
      If @HCtr>=3      
      Begin      
       SELECT @PrevYearField=PERIOD FROM #tmpPeriod WHERE Period LIKE LEFT(@Period,3)+@Prev_Yr+'%'      
       --Set @PrevYearField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 7 ELSE 3 END)))      
       Set @YoYGrowth=@YoYGrowth+'(CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)=0 THEN Null      
              ELSE (CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)<0 THEN -((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1)      
                  ELSE ((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1) END)      
              END ) ['+@Period+'],'      
       Set @UpDtYoY=@UpDtYoY+'['+@Period+']=Output.['+@Period+'],'      
      End      
     End      
           
    End      
--  2010FY 2011FY 2012FY 2013FY 1H2014 2H2014 2014FY 1H2015 2H2015 2015FY       
--  2010FY 2011FY 2012FY 2013FY 1Q2014 2Q2014 1H2014 3Q2014 4Q2014 2H2014 2014FY 1Q2015 2Q2015 1H2015 3Q2015 4Q2015 2H2015 2015FY       
--CTR 1  2  3  4  5 6  7  8  9 10  11  12  13 14  15  16  17 18      
--QCTR         1 2    3  4     5  6   7  8      
--FYCTR 1  2  3  4            5            6      
--HCTR            1     2       3      4      
    Else If  @Period Like '%FY%'      
    Begin      
     Set @PrevYearField=''      
     --If @QtrCtr>0 --And @ctr>5-- If Quarter starts then Prev Year will be found 5 Fields ahead because Calendar sequence is 1Q,2Q,3Q,4Q,FY      
     -- Set @PrevYearField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-CASE WHEN @PeriodFormat='QH' THEN 7 ELSE 5 END)))      
     --ELSE IF @HCtr>0      
     -- Set @PrevYearField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-3)))      
     --Else  -- Only FY is sequence      
     -- Set @PrevYearField='F'+RTRIM(LTRIM(Convert(varchar(10),@ctr-1)))      
     SELECT @PrevYearField=PERIOD FROM #tmpPeriod WHERE Period LIKE @Prev_Yr+' FY%'      
     IF (@PrevYearField!='')-- AND @PrevYearField!='F0')       
     Begin      
      --Set @YoYGrowth=@YoYGrowth+'(Case When ISNULL(Avg('+@PrevYearField+'),0)!=0 Then (Avg(['+@CurrentField+']) - Avg('+@PrevYearField+'))/ Avg('+@PrevYearField+') Else Null End) ['+@Period+'],'      
      --Set @YoYGrowth=@YoYGrowth+'(CASE WHEN ISNULL(Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])),0)=0 THEN Null      
      --       ELSE (CASE WHEN ISNULL(Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])),0)<0 THEN -((Avg(CONVERT(decimal(20,6),['+@CurrentField+']))/Avg(CONVERT(decimal(20,6),['+@PrevYearField+'])))-1)      
      --         ELSE ((Avg(['+@CurrentField+'])/Avg(['+@PrevYearField+']))-1) END)      
      --       END ) ['+@Period+'],'      
      Set @YoYGrowth=@YoYGrowth+'(CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)=0 THEN Null      
             ELSE (CASE WHEN ISNULL(CONVERT(decimal(20,6),['+@PrevYearField+']),0)<0 THEN -((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1)      
               ELSE ((CONVERT(decimal(20,6),['+@CurrentField+'])/CONVERT(decimal(20,6),['+@PrevYearField+']))-1) END)      
             END ) ['+@Period+'],'      
      Set @UpDtYoY=@UpDtYoY+'['+@Period+']=Output.['+@Period+'],'      
     End      
    End      
   End      
      
   --** Add Period Columns to #TmpZacksCons      
   Set @AddColumn= @AddColumn + '['+@Period+'] decimal(20,6),'      
   Set @AddColumnComment=@AddColumnComment+ '['+@Period+'_Comment] bit,'      
         
   --Set @AddColumnCons= @AddColumnCons + '['+@Period+'] decimal (20,6),'      
   ----** Add Period Columns to #TmpBM      
   Set @AddColumnBM = @AddColumnBM + '['+@Period+'] decimal (20,6),'      
   ------------** For Updating Brokerwise data (#TmpZacks & #TmpAllBM) with pivoted OutputDetail      
   Set @UpDtBM1stElement=@UpDtBM1stElement+'['+@Period+']=Output.['+@Period+'],'      
   --Set @UpdateSql=@UpdateSql+'['+@Period+']=Convert(Varchar(25),Output.['+@Period+']),'      
   Set @UpdateSql=@UpdateSql+'['+@Period+']=Output.['+@Period+'],'      
   Set @UpdateSqlComment=@UpdateSqlComment+'['+@Period+'_Comment]=Output.['+@Period+'_Comment],'      
   SET @MarginSql=@MarginSql+' ['+@Period+']=CASE WHEN ISNULL(CC.['+@Period+'],0)=0 THEN NULL ELSE CONVERT(decimal(20,6),BB.['+@Period+'])/CONVERT(decimal(20,6),CC.['+@Period+']) END,'      
   Fetch Next From crPeriod Into @Period,@PeriodOrder      
  End      
 SET @UpdateAvgComment = Substring(@UpdateAvgComment,1,len(@UpdateAvgComment)-1) -- Removing extra (,)      
 SET @PeriodCols = Substring(@PeriodCols,1,len(@PeriodCols)-1) -- Removing extra (,)      
 SET @PeriodColsComment = Substring(@PeriodColsComment,1,len(@PeriodColsComment)-1) -- Removing extra (,)      
      
 SET @PeriodAlias = Substring(@PeriodAlias,1,len(@PeriodAlias)-1) -- Removing extra (,)      
 SET @PeriodAliasComment = Substring(@PeriodAliasComment,1,len(@PeriodAliasComment)-1) -- Removing extra (,)      
      
 SET @AvgSql = Substring(@AvgSql,1,len(@AvgSql)-1) -- Removing extra (,)      
 IF LEN(@VarianceSql)>0      
  SET @VarianceSql = Substring(@VarianceSql,1,len(@VarianceSql)-1) -- Removing extra (,)      
 IF LEN(@VariancePercentSql)>0      
  SET @VariancePercentSql = Substring(@VariancePercentSql,1,len(@VariancePercentSql)-1) -- Removing extra (,)      
      
 If Len(@HighValue)>0      
  SET @HighValue = Substring(@HighValue,1,len(@HighValue)-1) -- Removing extra (,)      
 If Len(@LowValue)>0      
  SET @LowValue = Substring(@LowValue,1,len(@LowValue)-1) -- Removing extra (,)      
 If Len(@NumberOfBroker)>0      
  SET @NumberOfBroker = Substring(@NumberOfBroker,1,len(@NumberOfBroker)-1) -- Removing extra (,)      
       
 SET @UpdateSql = Substring(@UpdateSql,1,len(@UpdateSql)-1) -- Removing extra (,)      
 SET @UpdateSqlComment = Substring(@UpdateSqlComment,1,len(@UpdateSqlComment)-1) -- Removing extra (,)      
 SET @MarginSql = Substring(@MarginSql,1,len(@MarginSql)-1) -- Removing extra (,)      
      
 Set @QoQGrowth=Substring(@QoQGrowth,1,len(@QoQGrowth)-1) -- Removing extra (,)      
 Set @YoYGrowth=Substring(@YoYGrowth,1,len(@YoYGrowth)-1) -- Removing extra (,)      
      
 SET @UpDtActDate = Substring(@UpDtActDate,1,len(@UpDtActDate)-1) -- Removing extra (,)      
 If Len(@UpDtEstSql)>0      
  SET @UpDtEstSql = Substring(@UpDtEstSql,1,len(@UpDtEstSql)-1) -- Removing extra (,)      
 SET @UpDtQoQ = Substring(@UpDtQoQ,1,len(@UpDtQoQ)-1) -- Removing extra (,)      
 SET @UpDtYoY = Substring(@UpDtYoY,1,len(@UpDtYoY)-1) -- Removing extra (,)      
 SET @UpDtBM1stElement = Substring(@UpDtBM1stElement,1,len(@UpDtBM1stElement)-1) -- Removing extra (,)      
      
 SET @Fields = Substring(@Fields,1,len(@Fields)-1) -- Removing extra (,)      
       
 CLOSE crPeriod      
 DEALLOCATE crPeriod      
      
 Set @sql='Alter Table #TmpAll_Broker_LI Add ' + @AddColumn + @AddColumnComment + 'LineItem_Comment bit,BrokerName_Comment bit,Date_Comment bit'       
 Exec(@sql)      
       
 Set @sql='Alter Table #TmpZacksCons Add ' + @AddColumn + @AddColumnComment + 'LineItem_Comment bit,BrokerName_Comment bit,Date_Comment bit'        
 Exec(@sql)      
       
 Set @sql='Alter Table #TmpBM Add ' + @AddColumn + @AddColumnComment + 'LineItem_Comment bit,BrokerName_Comment bit,Date_Comment bit' --@AddColumnBM      
 Exec(@sql)      
      
--- Insert all preset Brokers with all section-LI (PER CSM CLIENT TUNER)      
 Insert Into #TmpAll_Broker_LI(Section,LineItem,BrokerCode,BrokerName,Ord)      
 Select Section, LineItem ,B.Brokers,B.BrokerName,Ord      
 From (      
   Select A.Section, A.LineItem, Max(OrderID) Ord From tblWebCSM A, [vwCSM_LI_Details] V      
   Where A.LineItem=V.LineItem AND V.CSM_ID=@CSM_Id AND A.Ticker=@Ticker And Isnull(Broker,'')!=''       
   And SUBSTRING(Broker,1,len(Broker)-charindex('-',Broker))       
   In (Select SUBSTRING(Brokers,1,len(Brokers)-charindex('-',Brokers)) Brokers From #Brokers)      
   Group By Section, A.LineItem      
  ) X      
 Cross Join #Brokers B      
      
 SET @sql=''      
      
 SET @sql = N'      
 UPDATE #TmpAll_Broker_LI SET [Revise Date]=Output.[Revise Date],Date_Comment=Output.Date_CommentExist, Ord=OrderID,      
   BrokerName_Comment=Broker_CommentExist,      
 '+@UpdateSql+','+@UpdateSqlComment+'      
 FROM #TmpAll_Broker_LI tmp,       
 (Select Section, LineItem,A.Broker,A.Broker_CommentExist,[Revise Date],Date_CommentExist, OrderID ,       
 '+@PeriodAlias+','+@PeriodAliasComment+'      
 From tblWebCSM A, #Brokers B      
 Where Ticker='''+@Ticker +''' And Isnull(Broker,'''')!=''''       
 And Broker=Brokers      
 ) Output      
 Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.BrokerCode=Output.Broker'      
 Exec(@sql)      
      
--select * from #TmpAll_Broker_LI
 --*New* Consensus generation      
       
 SET @sql='Insert Into #TmpZacksCons (Section, LineItem,Ord,      
 '+@PeriodCols+'      
 )      
 Select b.Section, b.LineItem,Max(Ord)+1 Ord,      
 '+@AvgSql+'      
  From #TmpAll_Broker_LI b       
  Group By b.Section, b.LineItem'      
 EXEC(@sql)      
      
-- Blue metrics      
---- Except 02,03,04,05,06       
    set @sql=''      
      
 Insert Into #TmpBM (Section, LineItem, Code,BM_Element)      
 Select Section,x.LineItem,code,bm_element      
  From (Select Distinct Section,LineItem From #TmpAll_Broker_LI) x      
  INNER JOIN ( Select LineItem, BMID Code,DisplayInCSM BM_Element From [vwCSM_LI_BM_Details]       
      WHERE CSM_ID=@CSM_Id) y      
  ON x.LineItem=y.LineItem      
 Order by x.LineItem,code      
      
 SET @sql = N'      
 Update #TmpBM Set BM_Element=Output.BM_Element,      
 '+@UpdateSql+'       
 From #TmpBM tmp,       
 (Select Section,LineItem,BM_Code Code,(Case When isnull(a.BM_Element,'''')='''' then b.bm_element else a.BM_Element end) BM_Element,      
    '+@PeriodAlias+'       
 From tblWebCSM a INNER JOIN tblBlueMetricsMaster b ON a.BM_code=b.code       
 Where Ticker='''+@Ticker +''' And Isnull(BM_Code,'''')!='''' And Isnull(BM_Code,'''') In (''01'',''07'',''10'') --Not In (''02'',''03'',''04'',''05'',''06'',''08'',''09'')      
  ) Output      
  Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
 '      
 EXEC(@sql)       
      
 -- 01 ---where it is found      
 -- UPDATE MARGIN (BM_CODE=01) AFTER CALCULATION ON CONSENSUS...08/29/2020      
 SET @sql=N'      
 UPDATE #TmpBM SET '+@MarginSql +' FROM #TmpBM AA,      
  (SELECT A.*,B.BM_Denominator FROM  #TmpZacksCons A,tblLiConfig B       
   WHERE A.Section=B.Section AND A.LineItem=B.LI AND B.Ticker='''+@Ticker+''' AND ISNULL(B.BM_Denominator,'''')!='''') BB,      
  (SELECT A.*,B.BM_Denominator FROM  #TmpZacksCons A,tblLiConfig B       
   WHERE A.Section=B.Section AND A.LineItem=B.LI AND B.Ticker='''+@Ticker+''' AND ISNULL(B.BM_Denominator,'''')='''') CC      
 WHERE AA.CODE=''01'' AND AA.Section=BB.Section AND AA.LineItem=BB.LineItem AND BB.BM_Denominator=CC.Section+''~''+CC.LineItem'      
--PRINT @sql      
 EXEC(@sql)       
      
--- YoY Growth Update (02)      
 SET @sql = N'      
 Update #TmpBM Set       
 '+@UpDtYoY+'       
 From #TmpBM tmp,       
 (Select a.Section,a.LineItem,''02'' code,      
 '+@YoYGrowth+'      
 From #TmpZacksCons a       
 INNER JOIN tblLiConfig b ON a.Section=b.Section AND a.LineItem=b.LI       
 Where ISNULL(AllowPercentageSign,'''')!=''true'' AND b.Ticker='''+@Ticker +'''      
 --Group By a.Section,a.LineItem      
  ) Output      
  Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
 '      
 EXEC(@sql)      
      
--- QoQ Growth Update (03)      
 SET @sql = N'      
 Update #TmpBM Set       
 '+@UpDtQoQ+'       
 From #TmpBM tmp,       
 (Select a.Section,a.LineItem,''03'' code,      
 '+@QoQGrowth+'      
 From #TmpZacksCons a       
 INNER JOIN tblLiConfig b ON a.Section=b.Section AND a.LineItem=b.LI       
 Where ISNULL(AllowPercentageSign,'''')!=''true'' AND b.Ticker='''+@Ticker +'''      
 --Group By a.Section,a.LineItem      
  ) Output      
  Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
 '      
 EXEC(@sql)      
      
---- Digest High, Digest Low, Valid Brokers in Estimates will be calculated from the Front end. So the following part has been commented out #AS11132019      
-- High Value      
 If Len(@UpDtEstSql)>0      
 Begin      
  SET @sql = N'      
  Update #TmpBM Set       
  '+@UpDtEstSql+'       
  From #TmpBM tmp,       
  (Select Section,LineItem,''04'' code,      
  '+@HighValue+'      
  From #TmpAll_Broker_LI       
  Group By Section,LineItem      
   ) Output      
   Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
  '      
  EXEC(@sql)      
 -- 05      
 -- Low Value      
  SET @sql = N'      
  Update #TmpBM Set       
  '+@UpDtEstSql+'       
  From #TmpBM tmp,       
  (Select Section,LineItem,''05'' code,      
  '+@LowValue+'      
  From #TmpAll_Broker_LI       
  Group By Section,LineItem      
   ) Output      
   Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
  '      
  EXEC(@sql)      
 -- 06      
  -- Number of Brokers      
  SET @sql = N'      
  Update #TmpBM Set       
  '+@UpDtEstSql+'       
  From #TmpBM tmp,       
  (Select Section,LineItem,''06'' code,      
  '+@NumberOfBroker+'      
  From #TmpAll_Broker_LI       
  Group By Section,LineItem      
   ) Output      
   Where tmp.Section=Output.Section And tmp.LineItem=Output.LineItem And tmp.Code=Output.Code      
  '      
  EXEC(@sql)      
 End      
      
 -- Generate 08 & 09 ( Varaiance and % Variance) // 09/07/2020      
 IF LEN(@VarianceSql)>0      
 BEGIN      
  SET @sql=N'      
   UPDATE #TmpBM SET '+@VarianceSql+' FROM #TmpBM A,      
       #TmpZacksCons B, (SELECT * FROM #TmpBM WHERE code=''07'') C      
   WHERE A.Section=B.Section AND A.LineItem=B.LineItem  AND A.Section=C.Section AND A.LineItem=C.LineItem      
    AND A.code=''08'''      
  EXEC(@sql)      
      
  SET @sql=N'      
   UPDATE #TmpBM SET '+@VariancePercentSql+' FROM #TmpBM A, tblLiConfig LC ,      
      (SELECT * FROM #TmpBM WHERE code=''08'') B, (SELECT * FROM #TmpBM WHERE code=''07'') C      
   WHERE A.Section=B.Section AND A.LineItem=B.LineItem  AND A.Section=C.Section AND A.LineItem=C.LineItem      
    AND A.Section=LC.Section AND A.LineItem=LC.Li AND Isnull(AllowPercentageSign,''FALSE'')=''FALSE''      
    AND A.code=''09'''      
  EXEC(@sql)       
 END      
      
 --- end of Generate 08 & 09 ( Varaiance and % Variance)      
      
 Set @sql='      
 Update #TmpBM Set Ord=OrderId      
 From #TmpBM t,       
  ( Select Section, LineItem,Max(Ord)+2 OrderID From #TmpAll_Broker_LI a       
  Group By Section, LineItem) b       
 Where t.Section=b.Section And t.LineItem=b.LineItem      
 ' --- #TmpAll_Broker_LI is ordered for all brokers in combination, thereafter next order tobe for Consensus and the next       
   --- will be for Blue metrics..that is why Max(Ord)+1 for Consensus and Max(Ord)+2 for BM      
 EXEC(@sql)      
      
 -- UPDATING COMMENT FLAG IN CONSENSUS, IF ANY      
 Set @sql=N'      
 UPDATE #TmpZacksCons SET LineItem_Comment=LI_CommentExist,      
 '+@UpdateAvgComment+'      
 FROM #TmpZacksCons A,       
 (SELECT Section,LineItem,LI_CommentExist,'+@PeriodAliasComment+' FROM tblWebCSM       
  WHERE Ticker='''+@Ticker+''' AND ISNULL(Broker,'''')='''' AND ISNULL(BM_CODE,'''')='''') Output      
 WHERE A.Section=Output.Section AND A.LineItem=Output.LineItem'      
 EXEC(@sql) 
 

SET @sql='DELETE FROM #TmpZacksCons 
		WHERE COALESCE('+@PeriodCols+',-99999.9999) = -99999.9999'
EXEC (@sql)

 ---------------------------------------------------------------------------------------      
 --- Displaying the entire data as per CSS pattern (Brokerwise periodical data, thereafter Consensus data, thereafter Bluemetrics data)      
 ---- following CSS protocol ---      
 --******************************************      
 -- Select From tblCSM_Model LEFT OUTER JOIN Following script ON LineItem      
 --******************************************      
 SET @sql = '      
 Select XX.*,'''' scale,Isnull(AllowComma,''FALSE'') AllowComma,Isnull(AllowedDecimalPlace,''0'') AllowedDecimalPlace,      
     Isnull(AllowPercentageSign,''FALSE'') AllowPercentageSign,Isnull(CurrencySign,'''') CurrencySign,Isnull(BM_Denominator,'''') BM_Denominator      
 From       
 (      
 ---- Broker Detail      
 Select AA.Section,AA.LineItem,Csm.DisplayInCSM ,AA.BrokerCode Broker,AA.BrokerName,'''' BM_Element,'''' BM_Code,AA.Ord,AA.[Revise Date],AA.LineItemId,      
   Csm.ID,[FontName],[FontStyle],[FontSize],[UnderLine],[BGColor],[FGColor],[Indent],[Box],[HeadingSubHeading],      
 '+@PeriodCols+','+@PeriodColsComment +',LineItem_Comment,BrokerName_Comment,Date_Comment      
 From tblCSM_ModelDetails Csm LEFT OUTER JOIN  (      
Select b.*,L.ID LineItemId         
  From #TmpAll_Broker_LI b    
  INNER JOIN TblLineItemTemplate L ON TickerID='''+@TickerID+''' AND b.LineItem= L.LineItem      
     ) AA ON Csm.LineItemId=AA.LineItemId      
 WHERE Csm.CSM_ID='+TRIM(CONVERT(CHAR(10),@CSM_Id))+' AND Csm.BMID=0 AND Type !=''SHEET''     
 UNION       
 ----- Consensus      
 Select Section, b.LineItem,DisplayInCSM, '''' Broker,'''' BrokerName,'''' BM_Element,'''' BM_Code, Ord,'''' [Revise Date],L.ID LineItemID,      
   Csm.ID,[FontName],[FontStyle],[FontSize],[UnderLine],[BGColor],[FGColor],[Indent],[Box],[HeadingSubHeading],      
  '+@PeriodCols+','+@PeriodColsComment +',LineItem_Comment,BrokerName_Comment,Date_Comment      
  From #TmpZacksCons b      
  INNER JOIN TblLineItemTemplate L ON TickerID='''+@TickerID+''' AND b.LineItem= L.LineItem      
  INNER JOIN tblCSM_ModelDetails Csm ON Csm.LineItemID=L.ID      
  WHERE Csm.CSM_ID='+TRIM(CONVERT(CHAR(10),@CSM_Id))+' AND Csm.BMID=0      
 ---- Blue Metrics      
     UNION      
  Select Section, b.LineItem,DisplayInCSM,'''' Broker,'''' BrokerName,BM_Element,Code BM_Code, Ord,'''' [Revise Date],L.ID LineItemID,      
   Csm.ID,[FontName],[FontStyle],[FontSize],[UnderLine],[BGColor],[FGColor],[Indent],[Box],[HeadingSubHeading],      
   '+@PeriodCols+','+@PeriodColsComment +',LineItem_Comment,BrokerName_Comment,Date_Comment      
  From #TmpBM b      
  INNER JOIN TblLineItemTemplate L ON TickerID='''+@TickerID+''' AND b.LineItem= L.LineItem      
  INNER JOIN tblCSM_ModelDetails Csm ON Csm.BMID=b.code AND Csm.LineItemID=L.ID      
  WHERE Csm.CSM_ID='+TRIM(CONVERT(CHAR(10),@CSM_Id))+'      
  AND Ord IS NOT NULL      
 ) XX       
 Left Outer Join tblLiConfig ZZ      
  On XX.Section=ZZ.Section And XX.LineItem=ZZ.LI And ZZ.Ticker='''+@Ticker+'''      
 Order by ID,Ord,BM_Code,LineItem,BrokerName'      
    
	--PRINT 'SELECT '+@PeriodCols+' FROM #TmpZacksCons'
	--EXEC( 'SELECT '+@PeriodCols+' FROM #TmpZacksCons')
--PRINT @sql 
  --SELECT BrokerName FROM #Brokers ORDER BY BrokerName
      
--SELECT * FROM #TmpAll_Broker_LI
 EXEC(@sql)      
End      
END TRY      
BEGIN CATCH      
 SELECT        
        ERROR_NUMBER() AS ErrorNumber        
        ,ERROR_SEVERITY() AS ErrorSeverity        
        ,ERROR_STATE() AS ErrorState        
        ,ERROR_PROCEDURE() AS ErrorProcedure        
        ,ERROR_LINE() AS ErrorLine        
        ,ERROR_MESSAGE() AS ErrorMessage;        
END CATCH      
End 